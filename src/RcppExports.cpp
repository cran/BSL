// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// simulate_cell
arma::ucube simulate_cell(LogicalMatrix x, IntegerVector rows, IntegerVector cols, double Pm, double Pp, int sim_iters, int num_obs);
RcppExport SEXP _BSL_simulate_cell(SEXP xSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP PmSEXP, SEXP PpSEXP, SEXP sim_itersSEXP, SEXP num_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< double >::type Pm(PmSEXP);
    Rcpp::traits::input_parameter< double >::type Pp(PpSEXP);
    Rcpp::traits::input_parameter< int >::type sim_iters(sim_itersSEXP);
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_cell(x, rows, cols, Pm, Pp, sim_iters, num_obs));
    return rcpp_result_gen;
END_RCPP
}
// rstable
double rstable(double scale, double alpha);
RcppExport SEXP _BSL_rstable(SEXP scaleSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(rstable(scale, alpha));
    return rcpp_result_gen;
END_RCPP
}
// sim_toad
NumericMatrix sim_toad(NumericVector params, int ntoad, int nday, int model, double d0);
RcppExport SEXP _BSL_sim_toad(SEXP paramsSEXP, SEXP ntoadSEXP, SEXP ndaySEXP, SEXP modelSEXP, SEXP d0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type ntoad(ntoadSEXP);
    Rcpp::traits::input_parameter< int >::type nday(ndaySEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type d0(d0SEXP);
    rcpp_result_gen = Rcpp::wrap(sim_toad(params, ntoad, nday, model, d0));
    return rcpp_result_gen;
END_RCPP
}
// obsMat2deltax
NumericVector obsMat2deltax(Rcpp::NumericMatrix X, unsigned int lag);
RcppExport SEXP _BSL_obsMat2deltax(SEXP XSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(obsMat2deltax(X, lag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BSL_simulate_cell", (DL_FUNC) &_BSL_simulate_cell, 7},
    {"_BSL_rstable", (DL_FUNC) &_BSL_rstable, 2},
    {"_BSL_sim_toad", (DL_FUNC) &_BSL_sim_toad, 5},
    {"_BSL_obsMat2deltax", (DL_FUNC) &_BSL_obsMat2deltax, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BSL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
